#!/usr/bin/env bash

exit_error () {
  print ${1}
  exit 1
}

if [ -z "${1}" ] ;
then
  if [ -e COMMIT_SHA ];
  then
    CI_COMMIT_SHA=$(cat COMMIT_SHA)
  else
    CI_COMMIT_SHA=$(git rev-parse --verify HEAD)
  fi
else
  CI_COMMIT_SHA=$1
fi

if [ -z "${2}" ] ;
then
  if [ -e COMMIT_REF ];
  then
    CI_COMMIT_REF_SLUG=$(cat COMMIT_REF)
  else
    CI_COMMIT_REF_SLUG=$(git describe --tags --exact-match || git describe --tags || git symbolic-ref -q --short HEAD)
  fi
else
  CI_COMMIT_REF_SLUG=$2
fi

if [ -z "${3}" ] ;
then
  REPO_NAME=$(pwd -P)
  REPO_NAME=${REPO_NAME#$GOPATH/src}
else
  REPO_NAME=$3
fi

REPO_NAME=${REPO_NAME#/}
REPO_NAME=${REPO_NAME%/}

if [ -z "${4}" ] ;
then
  PACKAGE=$(basename $REPO_NAME)
else
  PACKAGE=$4
fi

if [ -e DATEBUILD ];
then
  DATEBUILD=$(cat DATEBUILD)
else
  DATEBUILD=$(git log -1 --format=%ci ${CI_COMMIT_SHA} | awk '{print $1"T"$2$3}')
fi

if [ "${DATEBUILD}" = "T" ];
then
  DATEBUILD=$(git log -1 --format=%cd --date=iso | awk '{print $1"T"$2$3}')
fi

if [ -z "${CI_COMMIT_REF_SLUG}" ];
then 
  CI_COMMIT_REF_SLUG=$(echo "0.0")
fi

if [ ! -e vendor ] || [ ! -e Gopkg.lock ];
then
  echo -e "\n\t >>> Refresh dependances..."
  dep ensure || exit_error "Error on dep ensure..."
fi

[ -e vendor ] || exit_error "Error vendor folder not found ..."

echo -e "\n\t >>> Status of dependances..."
dep status || exit_error "Error on dep status..."

echo -e "\n\t >>> Building sources..."
echo -e "\t\t >>> -X ${REPO_NAME}/version.Release=${CI_COMMIT_REF_SLUG}"
echo -e "\t\t >>> -X ${REPO_NAME}/version.Build=${CI_COMMIT_SHA}"
echo -e "\t\t >>> -X ${REPO_NAME}/version.Package=${PACKAGE}"
echo -e "\t\t >>> -X ${REPO_NAME}/version.Date=${DATEBUILD}"
go clean

if [ -z "${LOCAL_BUILD}" ];
then
  go build -race -a -v -ldflags "-extldflags '-static' -X ${REPO_NAME}/version.Release=${CI_COMMIT_REF_SLUG} -X ${REPO_NAME}/version.Build=${CI_COMMIT_SHA} -X ${REPO_NAME}/version.Package=${PACKAGE} -X ${REPO_NAME}/version.Date=${DATEBUILD}" -o ${PACKAGE}
else
  go build -race -v -ldflags "-extldflags '-static' -X ${REPO_NAME}/version.Release=${CI_COMMIT_REF_SLUG} -X ${REPO_NAME}/version.Build=${CI_COMMIT_SHA} -X ${REPO_NAME}/version.Package=${PACKAGE} -X ${REPO_NAME}/version.Date=${DATEBUILD}" -o ${PACKAGE}
fi

echo -e "\n\n\n\t Building Code for release :"
echo -e "\t\t Release=${CI_COMMIT_REF_SLUG}"
echo -e "\t\t Build=${CI_COMMIT_SHA}"
echo -e "\t\t Package=${PACKAGE}"
echo -e "\t\t Date=${DATEBUILD}"

echo -e "\n\n"
set -x
./${PACKAGE} --version || exit_error "Error on test builded tools..."
./${PACKAGE} --help || exit_error "Error on test builded tools..."
set +x

echo -e "\n\n\n\n"


